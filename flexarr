#!/bin/bash
# flexarr: a FlexVolume driver for CIFS or local direct mount
# version 0.2.0
# Copyright (c) 2024, Chris Danis
# Licensed under the AGPL license
# https://www.gnu.org/licenses/agpl-3.0.html

set -e

# Function for logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >&2
}

# Function for error handling
die() {
    local error_message="$1"
    log "ERROR: $error_message"
    echo "{\"status\": \"Failure\", \"message\": $(jq -Rs . <<< "$error_message")}"
    exit 1
}

# Function to execute command and capture output
execute_command() {
    local output
    if ! output=$(eval "$1" 2>&1); then
        die "$output"
    fi
    echo "$output"
}

# Function to check required commands
check_command() {
    if ! command -v "$1" &> /dev/null; then
        die "$1 is not installed"
    fi
}

# Function to safely decode base64
safe_decode() {
    echo "$1" | base64 --decode 2>/dev/null || die "Failed to decode $2"
}

# Main logic
case "$1" in
    init)
        check_command jq
        check_command mount.cifs
        echo '{"status": "Success", "capabilities": {"attach": false}}'
        ;;
    mount)
        MOUNT_DIR=$2
        PARAMS=$3

        # Extract parameters
        NAS_HOSTNAME=$(jq -r '.nasHostname // empty' <<< "$PARAMS")
        NAS_LOCAL_PATH=$(jq -r '.nasLocalPath // empty' <<< "$PARAMS")
        NAS_NETWORK_PATH=$(jq -r '.nasNetworkPath // empty' <<< "$PARAMS")
        READ_ONLY=$(jq -r '.readOnly // "false"' <<< "$PARAMS")
        MOUNT_OPTIONS=$(jq -r '.mountOptions // ""' <<< "$PARAMS")
        FS_GROUP=$(jq -r '."kubernetes.io/mounterArgs.FsGroup" // empty' <<< "$PARAMS")

        # Check required parameters
        [[ -z "$NAS_HOSTNAME" ]] && die "nasHostname is required"
        [[ -z "$NAS_LOCAL_PATH" ]] && die "nasLocalPath is required"
        [[ -z "$NAS_NETWORK_PATH" ]] && die "nasNetworkPath is required"

        # Securely handle credentials
        USER=$(safe_decode "$(jq -r '."kubernetes.io/secret/username" // empty' <<< "$PARAMS")" "username")
        PASSWD=$(safe_decode "$(jq -r '."kubernetes.io/secret/password" // empty' <<< "$PARAMS")" "password")

        if [[ "$(hostname)" == "$NAS_HOSTNAME" ]]; then
            log "Performing local direct mount"
            output=$(execute_command "mount --bind \"$NAS_LOCAL_PATH\" \"$MOUNT_DIR\"")
            
            if [[ "$READ_ONLY" == "true" ]]; then
                output+=$'\n'$(execute_command "mount -o remount,ro \"$MOUNT_DIR\"")
            fi
            
            if [[ -n "$FS_GROUP" ]]; then
                output+=$'\n'$(execute_command "mount -o remount,gid=\"$FS_GROUP\" \"$MOUNT_DIR\"")
            fi
        else
            log "Performing CIFS mount"
            OPTIONS=("user=$USER" "password=$PASSWD")
            [[ "$READ_ONLY" == "true" ]] && OPTIONS+=("ro")
            [[ -n "$MOUNT_OPTIONS" ]] && OPTIONS+=($MOUNT_OPTIONS)
            [[ -n "$FS_GROUP" ]] && OPTIONS+=("gid=$FS_GROUP")
            
            output=$(execute_command "mount -t cifs \"$NAS_NETWORK_PATH\" \"$MOUNT_DIR\" -o \"$(IFS=,; echo "${OPTIONS[*]}")\"")
        fi

        echo "{\"status\": \"Success\", \"message\": $(jq -Rs . <<< "$output")}"
        ;;
    unmount)
        MOUNT_DIR=$2
        output=$(execute_command "umount \"$MOUNT_DIR\"")
        echo "{\"status\": \"Success\", \"message\": $(jq -Rs . <<< "$output")}"
        ;;
    *)
        die "Not supported"
        ;;
esac
